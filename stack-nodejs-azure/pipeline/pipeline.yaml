# YAML anchors
shared:
# Task : sync and merge with rsync 2 rep. Used to merge stack and config
- &merge-stack-and-config
  platform: linux
  image_resource:
    type: registry-image
    source:
      repository: cycloid/cycloid-toolkit
      tag: latest
  run:
    path: /usr/bin/merge-stack-and-config


resource_types:
- name: terraform
  type: registry-image
  source:
    repository: cycloid/terraform-resource
    tag: ((terraform_version))

- name: cycloid-events
  type: registry-image
  source:
    repository: cycloid/cycloid-events-resource
    tag: latest

# The email Concourse resource type allowing to send emails from this pipeline.
# (cf. https://github.com/pivotal-cf/email-resource)
#
# - name: email
#   type: registry-image
#   source:
#     repository: pcfseceng/email-resource


resources:
- name: tfstate
  type: terraform
  icon: terraform
  source:
    env_name: ((env))
    backend_type: http
    backend_config:
      address: '((cycloid_api_url))/inventory?jwt=($ inventory_jwt $)'
    vars:
      azure_cred: ((azure_cred))
      keypair_public: ((keypair_public))
      env: ((env))
      project: ((project))
      customer: ((customer))

# The Cycloid event resource to log events
- name: cycloid-event
  type: cycloid-events
  source:
    api_key: ((cycloid_api_key))
    api_url: ((cycloid_api_url))
    icon: fa-code-branch
    organization: ((customer))
    severity: info
    type: Custom
    tags:
      - key: project
        value: ((project))
      - key: env
        value: ((env))
  icon: calendar

# The email Concourse resource allowing to send emails from this pipeline.
# Please add a custom "smtp" credential in Cycloid console accordingly.
#
# - name: send-email
#   type: email
#   source:
#     smtp:
#       host: ((smtp.server))
#       port: "((smtp.port))" # this must be a string
#       username: ((smtp.user))
#       password: ((smtp.passwd))
#     from: ((smtp.from))
#     to: [ ((smtp.to)) ]

# The Terraform stack (will be merged with the config)
- name: git_stack-terraform
  type: git
  icon: git
  source:
    uri: ((stack_git_repository))
    branch: ((stack_git_branch))
    private_key: ((stack_git_private_key))
    # username: ((stack_git_username))
    # password: ((stack_git_token))
    paths:
      - ((stack_terraform_path))/*

# The Terraform config (will be merged with the stack)
- name: git_config-terraform
  type: git
  icon: git
  source:
    uri: ((config_git_repository))
    branch: ((config_git_branch))
    private_key: ((config_git_private_key))
    # username: ((config_git_username))
    # password: ((config_git_token))
    paths:
      - ((config_terraform_path))/*

groups:
- name: overview
  jobs:
    - terraform-plan
    - terraform-apply

- name: destroy
  jobs:
    - terraform-destroy


jobs:
  # Merge and trigger a plan whenever there is a commit in Terraform stack or config
  - name: terraform-plan
    serial: true
    max_in_flight: 1
    build_logs_to_retain: 10
    plan:
      - in_parallel:
        - get: git_stack-terraform
          trigger: true

        - get: git_config-terraform
          trigger: true

      - task: merge-stack-and-config
        config:
          <<: *merge-stack-and-config
          inputs:
          - name: git_config-terraform
            path: "config"
          - name: git_stack-terraform
            path: "stack"
          outputs:
          - name: merged-stack
            path: "merged-stack"
        params:
          CONFIG_PATH: ((config_terraform_path))
          STACK_PATH: ((stack_terraform_path))

      - put: tfstate
        params:
          plan_only: true
          terraform_source: merged-stack/


  # Merge and trigger an apply whenever there is a terraform plan passed successfully
  - name: terraform-apply
    serial: true
    max_in_flight: 1
    build_logs_to_retain: 10
    plan:
      - in_parallel:
        - get: git_stack-terraform
          trigger: false
          passed:
            - terraform-plan

        - get: git_config-terraform
          trigger: false
          passed:
            - terraform-plan

        - get: tfstate
          trigger: true
          passed:
            - terraform-plan

      - task: merge-stack-and-config
        config:
          <<: *merge-stack-and-config
          inputs:
          - name: git_config-terraform
            path: "config"
          - name: git_stack-terraform
            path: "stack"
          outputs:
          - name: merged-stack
            path: "merged-stack"
        params:
          CONFIG_PATH: ((config_terraform_path))
          STACK_PATH: ((stack_terraform_path))

      - put: tfstate
        params:
          plan_run: true
          terraform_source: merged-stack/

        on_success:
          do:
            - put: cycloid-event
              params:
                severity: info
                title: Cycloid worker deployment successful
                message: The project ((project)) on ((env)) environment deployed successfully

        # On job execution success, send also a notification email.
        # To enable it, you will need to uncomment the above resource type and resource declaration.
        #
        #     - put: send-email
        #       params:
        #         subject_text: "Build SUCCESS: ${BUILD_PIPELINE_NAME}/${BUILD_JOB_NAME}/${BUILD_NAME}"
        #         body_text: "Build finished successfully: https://console.cycloid.io/organizations/((customer))/projects/((project))/pipelines/${BUILD_PIPELINE_NAME}/jobs/${BUILD_JOB_NAME}/builds/${BUILD_ID}"


  # Destroy the infrastructure
  - name: terraform-destroy
    max_in_flight: 1
    build_logs_to_retain: 10
    plan:
      - in_parallel:
        - get: git_stack-terraform
          trigger: false
          passed:
            - terraform-plan

        - get: git_config-terraform
          trigger: false
          passed:
            - terraform-plan

        - get: tfstate
          trigger: false

      - task: merge-stack-and-config
        config:
          <<: *merge-stack-and-config
          inputs:
          - name: git_config-terraform
            path: "config"
          - name: git_stack-terraform
            path: "stack"
          outputs:
          - name: merged-stack
            path: "merged-stack"
        params:
          CONFIG_PATH: ((config_terraform_path))
          STACK_PATH: ((stack_terraform_path))

      - put: tfstate
        params:
          action: destroy
          terraform_source: merged-stack/
        get_params:
          action: destroy